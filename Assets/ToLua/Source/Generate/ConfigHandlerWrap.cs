//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ConfigHandlerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ConfigHandler), typeof(System.Object));
		L.RegFunction("Open", Open);
		L.RegFunction("OpenFromAB", OpenFromAB);
		L.RegFunction("Parser", Parser);
		L.RegFunction("Clear", Clear);
		L.RegFunction("WriteValue", WriteValue);
		L.RegFunction("ReadValue", ReadValue);
		L.RegFunction("Flush", Flush);
		L.RegFunction("New", _CreateConfigHandler);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateConfigHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				ConfigHandler obj = new ConfigHandler();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				ConfigHandler obj = new ConfigHandler(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ConfigHandler.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Open(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			ConfigHandler o = ConfigHandler.Open(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenFromAB(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			ConfigHandler o = ConfigHandler.OpenFromAB(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Parser(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ConfigHandler obj = (ConfigHandler)ToLua.CheckObject<ConfigHandler>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			obj.Parser(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ConfigHandler obj = (ConfigHandler)ToLua.CheckObject<ConfigHandler>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteValue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				ConfigHandler obj = (ConfigHandler)ToLua.CheckObject<ConfigHandler>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.WriteValue(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				ConfigHandler obj = (ConfigHandler)ToLua.CheckObject<ConfigHandler>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.WriteValue(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ConfigHandler.WriteValue");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadValue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				ConfigHandler obj = (ConfigHandler)ToLua.CheckObject<ConfigHandler>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string o = obj.ReadValue(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				ConfigHandler obj = (ConfigHandler)ToLua.CheckObject<ConfigHandler>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string o = obj.ReadValue(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ConfigHandler.ReadValue");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Flush(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ConfigHandler obj = (ConfigHandler)ToLua.CheckObject<ConfigHandler>(L, 1);
			obj.Flush();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

