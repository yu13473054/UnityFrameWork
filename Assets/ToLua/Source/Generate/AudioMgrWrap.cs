//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AudioMgrWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AudioMgr), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("OnInit", OnInit);
		L.RegFunction("Play", Play);
		L.RegFunction("Stop", Stop);
		L.RegFunction("Pause", Pause);
		L.RegFunction("Resume", Resume);
		L.RegFunction("IsPlaying", IsPlaying);
		L.RegFunction("ClearAllClip", ClearAllClip);
		L.RegFunction("Mute", Mute);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("_inst", get__inst, set__inst);
		L.RegVar("currBgId", get_currBgId, set_currBgId);
		L.RegVar("currModule", get_currModule, set_currModule);
		L.RegVar("Inst", get_Inst, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AudioMgr obj = (AudioMgr)ToLua.CheckObject<AudioMgr>(L, 1);
			obj.OnInit();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				AudioMgr obj = (AudioMgr)ToLua.CheckObject<AudioMgr>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				int o = obj.Play(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4)
			{
				AudioMgr obj = (AudioMgr)ToLua.CheckObject<AudioMgr>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				int o = obj.Play(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5)
			{
				AudioMgr obj = (AudioMgr)ToLua.CheckObject<AudioMgr>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				int o = obj.Play(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 6)
			{
				AudioMgr obj = (AudioMgr)ToLua.CheckObject<AudioMgr>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				bool arg4 = LuaDLL.luaL_checkboolean(L, 6);
				int o = obj.Play(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AudioMgr.Play");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Stop(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				AudioMgr obj = (AudioMgr)ToLua.CheckObject<AudioMgr>(L, 1);
				obj.Stop();
				return 0;
			}
			else if (count == 2)
			{
				AudioMgr obj = (AudioMgr)ToLua.CheckObject<AudioMgr>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.Stop(arg0);
				return 0;
			}
			else if (count == 3)
			{
				AudioMgr obj = (AudioMgr)ToLua.CheckObject<AudioMgr>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				obj.Stop(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AudioMgr.Stop");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Pause(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				AudioMgr obj = (AudioMgr)ToLua.CheckObject<AudioMgr>(L, 1);
				obj.Pause();
				return 0;
			}
			else if (count == 2)
			{
				AudioMgr obj = (AudioMgr)ToLua.CheckObject<AudioMgr>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.Pause(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AudioMgr.Pause");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Resume(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				AudioMgr obj = (AudioMgr)ToLua.CheckObject<AudioMgr>(L, 1);
				obj.Resume();
				return 0;
			}
			else if (count == 2)
			{
				AudioMgr obj = (AudioMgr)ToLua.CheckObject<AudioMgr>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.Resume(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AudioMgr.Resume");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsPlaying(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				AudioMgr obj = (AudioMgr)ToLua.CheckObject<AudioMgr>(L, 1);
				bool o = obj.IsPlaying();
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2)
			{
				AudioMgr obj = (AudioMgr)ToLua.CheckObject<AudioMgr>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				bool o = obj.IsPlaying(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AudioMgr.IsPlaying");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAllClip(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			AudioMgr obj = (AudioMgr)ToLua.CheckObject<AudioMgr>(L, 1);
			obj.ClearAllClip();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Mute(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AudioMgr obj = (AudioMgr)ToLua.CheckObject<AudioMgr>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Mute(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get__inst(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AudioMgr._inst);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currBgId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AudioMgr obj = (AudioMgr)o;
			int ret = obj.currBgId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index currBgId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currModule(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AudioMgr obj = (AudioMgr)o;
			string ret = obj.currModule;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index currModule on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Inst(IntPtr L)
	{
		try
		{
			ToLua.Push(L, AudioMgr.Inst);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set__inst(IntPtr L)
	{
		try
		{
			AudioMgr arg0 = (AudioMgr)ToLua.CheckObject<AudioMgr>(L, 2);
			AudioMgr._inst = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currBgId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AudioMgr obj = (AudioMgr)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.currBgId = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index currBgId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_currModule(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			AudioMgr obj = (AudioMgr)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.currModule = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index currModule on a nil value");
		}
	}
}

